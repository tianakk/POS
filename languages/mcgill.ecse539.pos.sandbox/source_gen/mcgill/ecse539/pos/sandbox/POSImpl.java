package mcgill.ecse539.pos.sandbox;

/*Generated by MPS */

import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

public class POSImpl {
  private HashMap<Integer, EmployeeImpl> employees = new HashMap<>();
  private HashMap<Integer, TableImpl> tables = new HashMap<>();
  private HashMap<String, OrderImpl> orders = new HashMap<>();
  private HashMap<Integer, BillImpl> bills = new HashMap<>();
  private HashMap<Integer, MenuItemImpl> menuItems = new HashMap<>();
  private InventoryImpl inventory;

  public enum TransactionType {
    Credit(),
    Cash(),
    Debit()
  }

  public static void wrongNumber() {
    System.out.println("Wrong number of args");
  }

  public static void wrongFormat() {
    System.out.println("Wrong format");
  }

  public void printTables() {
    for (Integer key : tables.keySet()) {
      System.out.println(tables.get(key).getNumber() + " " + tables.get(key).getBusy());
    }
  }

  public void createTable(String tableNumber) {
    int number;
    try {
      number = Integer.parseInt(tableNumber);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    if (tables.keySet().contains(number)) {
      System.out.println("Table number already exists");
    } else {
      TableImpl table = new TableImpl(number);
      tables.put(number, table);
    }
  }

  public void deleteTable(String tableNumber) {
    int number;
    try {
      number = Integer.parseInt(tableNumber);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    if (tables.keySet().contains(number)) {
      tables.remove(number);
    } else {
      System.out.println("Table doesn't exist");
    }
  }

  public void setTableStatus(String tableNumber, String newStatus) {
    int number;
    boolean status;
    try {
      number = Integer.parseInt(tableNumber);
      status = Boolean.parseBoolean(newStatus);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    if (tables.keySet().contains(number)) {
      tables.get(number).setBusy(status);
    } else {
      System.out.println("Table doesn't exist");
    }
  }

  public void assignEmployeeTable(String employee, String tableNumber) {
    int id;
    int number;
    try {
      number = Integer.parseInt(tableNumber);
      id = Integer.parseInt(employee);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    if (employees.keySet().contains(id) && tables.keySet().contains(number)) {
      employees.get(id).setTable(tables.get(number));
    } else {
      System.out.println("Table or Employee doesn't exist");
    }
  }

  public void removeEmployeeTable(String employee) {
    int id;
    try {
      id = Integer.parseInt(employee);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    if (employees.keySet().contains(id)) {
      employees.get(id).setTable(null);
    } else {
      System.out.println("Employee doesn't exist");
    }
  }
  public void printMenu() {
    for (Integer key : menuItems.keySet()) {
      System.out.println(menuItems.get(key).getId() + " " + menuItems.get(key).getName() + " " + menuItems.get(key).getPrice());
    }
  }
  public void createOrder(String oId) {
    int orderId;
    try {
      orderId = Integer.parseInt(oId);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    if (orders.containsKey(oId)) {
      System.out.println("Order Id already exists");
      return;
    } else {
      ArrayList<OrderItemConceptImpl> orderItems = new ArrayList<>();
      OrderImpl order = new OrderImpl(oId, orderItems);
      orders.put(oId, order);
    }
  }
  public OrderImpl getOrderbyId(String orderIdString) {
    int orderid;
    try {
      orderid = Integer.parseInt(orderIdString);
    } catch (NumberFormatException e) {
      wrongFormat();
      return null;
    }
    for (OrderImpl order : orders.values()) {
      if (order.getId().equals(orderIdString)) {
        return order;
      }
    }
    return null;
  }
  public void printOrder(String oidstring) {
    int orderid;
    try {
      orderid = Integer.parseInt(oidstring);
    } catch (NumberFormatException e) {
      wrongFormat();
      return;
    }
    OrderImpl order = getOrderbyId(oidstring);
    if (order != null) {
      System.out.println("order id: " + oidstring);
      for (OrderItemConceptImpl oitem : order.getOrderItems()) {
        System.out.println(oitem);
      }
    } else {
      System.out.println("no order with specified id found");
    }
  }

  public void printAllOrders() {
    for (String orderId : orders.keySet()) {
      System.out.println(orderId);
    }
  }
  public void deleteOrderItem(String oid, String mmid) {
    int mid = Integer.parseInt(mmid);
    OrderImpl order = getOrderbyId(oid);
    ArrayList<OrderItemConceptImpl> orderItems = order.getOrderItems();
    Iterator<OrderItemConceptImpl> iterator = orderItems.iterator();
    while (iterator.hasNext()) {
      OrderItemConceptImpl oitem = iterator.next();
      if (oitem.getItemName().getId() == mid) {
        iterator.remove();
        break;
      }

    }
    for (OrderItemConceptImpl oitem : orderItems) {
    }
  }
  public void addOrderItem(String orderid, int quantity, int itemId) {
    // get menu item id, find item , pass as arg
    MenuItemImpl mitem = null;
    for (MenuItemImpl item : menuItems.values()) {
      if (item.getId() == itemId) {
        mitem = item;
        break;
      }
    }
    if (mitem != null) {
      OrderItemConceptImpl item = new OrderItemConceptImpl(quantity, mitem);
      OrderImpl order = getOrderbyId(orderid);
      if (order != null) {
        order.setnewItemInOrder(item);
      } else {
        System.out.println("order with orderid = " + orderid + "not found");
      }
    } else {
      System.out.println("MenuItem with itemID" + itemId + "not found");
    }
  }
  public void startBill(String orderIdString, int payAmount) {
    int oid;
    TransactionType[] values = TransactionType.values();
    TransactionType first = values[0];
    try {
      oid = Integer.parseInt(orderIdString);
    } catch (Exception e) {
      wrongFormat();
      return;
    }

    OrderImpl order = getOrderbyId(orderIdString);
    if (order == null) {
      System.out.println("Order with  id " + orderIdString + " not found. can't create bill.");
      return;
    }
    System.out.println("bill created");
    BillImpl bill = new BillImpl(payAmount, false, oid, 2024, 4, 9, first, order);
    bills.put(1, bill);
  }
  public void deleteBill(String oidsString) {
    Iterator<Map.Entry<Integer, BillImpl>> iterator = bills.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<Integer, BillImpl> entry = iterator.next();
      BillImpl bill = entry.getValue();

      if (bill.getOrder().getId() == oidsString) {
        iterator.remove();
        System.out.println("Bill with orderId " + oidsString + " deleted succesfully");
        return;
      }
    }
    System.out.println("no bill was found with order id : " + oidsString);
  }
  public void payBill(String orderIdString) {
    int orderid;
    try {
      orderid = Integer.parseInt(orderIdString);
    } catch (Exception e) {
      wrongFormat();
      return;
    }
    boolean found = false;
    for (BillImpl bill : bills.values()) {
      if (bill.getOrder().getId().equals(orderIdString)) {
        bill.updatePaymentStatus(true);
        System.out.println("bill paid");
        found = true;
        break;
      }
    }
    if (!(found)) {
      System.out.println("no bill found to pay with sepcified oid");
    }


  }
  public void printBill(String orderIdString) {
    int orderid = Integer.parseInt(orderIdString);
    try {
      orderid = Integer.parseInt(orderIdString);
    } catch (Exception e) {
      wrongFormat();
      return;
    }

    for (BillImpl bill : bills.values()) {
      if (bill.getOrder().getId().equals(orderIdString)) {
        System.out.println(bill.getOrder().getId() + bill.getDate() + bill.getPaymentAmount());
      }
    }
  }

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    POSImpl pos = new POSImpl();

    // setup
    EmployeeImpl employee_a = new EmployeeImpl(11, "anna");
    EmployeeImpl employee_b = new EmployeeImpl(12, "edward");
    pos.employees.put(employee_a.getId(), employee_a);
    pos.employees.put(employee_b.getId(), employee_b);

    TableImpl table_a = new TableImpl(12);
    TableImpl table_b = new TableImpl(13);
    TableImpl table_c = new TableImpl(14);
    TableImpl table_d = new TableImpl(15);
    pos.tables.put(table_a.getNumber(), table_a);
    pos.tables.put(table_b.getNumber(), table_b);
    pos.tables.put(table_c.getNumber(), table_c);
    pos.tables.put(table_d.getNumber(), table_d);

    pos.inventory = new InventoryImpl();
    pos.inventory.createItem("posca", 10);
    pos.inventory.createItem("asofoetida", 111);
    pos.inventory.createItem("silphium", 10);
    pos.inventory.createItem("garum", 10000);
    pos.inventory.createItem("vinum", 12);
    pos.inventory.createItem("pork", 3000);

    ArrayList<InventoryItemImpl> ingredientsList_a = new ArrayList<>();
    ArrayList<InventoryItemImpl> ingredientsList_b = new ArrayList<>();
    ArrayList<InventoryItemImpl> ingredientsList_c = new ArrayList<>();
    ArrayList<InventoryItemImpl> ingredientsList_d = new ArrayList<>();
    ingredientsList_a.add(pos.inventory.getInventoryItem("posca"));
    ingredientsList_a.add(pos.inventory.getInventoryItem("asofoetida"));
    ingredientsList_a.add(pos.inventory.getInventoryItem("pork"));
    ingredientsList_b.add(pos.inventory.getInventoryItem("asofoetida"));
    ingredientsList_c.add(pos.inventory.getInventoryItem("garum"));
    ingredientsList_d.add(pos.inventory.getInventoryItem("garum"));
    MenuItemImpl menuItem_a = new MenuItemImpl(1, 12, "nuggets", ingredientsList_a);
    MenuItemImpl menuItem_b = new MenuItemImpl(2, 15, "burger", ingredientsList_b);
    MenuItemImpl menuItem_c = new MenuItemImpl(3, 5, "smoothie", ingredientsList_c);
    MenuItemImpl menuItem_d = new MenuItemImpl(4, 7, "fries", ingredientsList_d);
    pos.menuItems.put(menuItem_a.getId(), menuItem_a);
    pos.menuItems.put(menuItem_b.getId(), menuItem_b);
    pos.menuItems.put(menuItem_c.getId(), menuItem_c);
    pos.menuItems.put(menuItem_d.getId(), menuItem_d);

    ArrayList<OrderItemConceptImpl> orderItemsList_a = new ArrayList<>();
    ArrayList<OrderItemConceptImpl> orderItemsList_b = new ArrayList<>();
    OrderItemConceptImpl orderItem_a0 = new OrderItemConceptImpl(13, pos.menuItems.get(2));
    OrderItemConceptImpl orderItem_b0 = new OrderItemConceptImpl(12, pos.menuItems.get(1));
    OrderItemConceptImpl orderItem_a1 = new OrderItemConceptImpl(12, pos.menuItems.get(2));
    OrderItemConceptImpl orderItem_b1 = new OrderItemConceptImpl(5, pos.menuItems.get(4));
    OrderItemConceptImpl orderItem_c1 = new OrderItemConceptImpl(7, pos.menuItems.get(4));
    orderItemsList_a.add(orderItem_a0);
    orderItemsList_a.add(orderItem_b0);
    orderItemsList_b.add(orderItem_a1);
    orderItemsList_b.add(orderItem_b1);
    orderItemsList_b.add(orderItem_c1);
    OrderImpl order_a = new OrderImpl("12", orderItemsList_a);
    OrderImpl order_b = new OrderImpl("11", orderItemsList_b);
    pos.orders.put(order_a.getId(), order_a);
    pos.orders.put(order_b.getId(), order_b);

    BillImpl bill_a = new BillImpl(12, false, 13, 2001, 12, 12, TransactionType.valueOf("Debit"), pos.orders.get("12"));
    pos.bills.put(bill_a.getId(), bill_a);

    System.out.println("POS started, input q to quit");

    String scan = scanner.nextLine();
    while (!(scan.equals("q"))) {
      String[] inputArr = scan.split(" ");
      if (inputArr[0].equals("tables")) {
        pos.printTables();
      } else if (inputArr[0].equals("createTable")) {
        if (inputArr.length == 2) {
          pos.createTable(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("deleteTable")) {
        if (inputArr.length == 2) {
          pos.deleteTable(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("setTableStatus")) {
        if (inputArr.length == 3) {
          pos.setTableStatus(inputArr[1], inputArr[2]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("assignEmployeeTable")) {
        if (inputArr.length == 3) {
          pos.assignEmployeeTable(inputArr[1], inputArr[2]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("removeEmployeeTable")) {
        if (inputArr.length == 2) {
          pos.removeEmployeeTable(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("getMenu")) {
        pos.printMenu();

      } else if (inputArr[0].equals("createOrder")) {
        if (inputArr.length == 2) {
          pos.createOrder(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("addAnItemToOrder")) {
        if (inputArr.length == 4) {
          int quantity = Integer.parseInt(inputArr[2]);
          int itemId = Integer.parseInt(inputArr[3]);
          pos.addOrderItem(inputArr[1], quantity, itemId);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("deleteAnItemFromOrder")) {
        if (inputArr.length == 3) {
          pos.deleteOrderItem(inputArr[1], inputArr[2]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("createBill")) {
        if (inputArr.length == 3) {
          int pay = Integer.parseInt(inputArr[2]);
          pos.startBill(inputArr[1], pay);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("deleteBill")) {
        if (inputArr.length == 2) {
          pos.deleteBill(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("getBill")) {
        if (inputArr.length == 2) {
          pos.printBill(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("getTableOrder")) {
        if (inputArr.length == 2) {
          pos.printOrder(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("pay")) {
        if (inputArr.length == 2) {
          pos.payBill(inputArr[1]);
        } else {
          wrongNumber();
        }
      } else if (inputArr[0].equals("printallorders")) {
        pos.printAllOrders();
      }

      scan = scanner.nextLine();
    }
  }
}
