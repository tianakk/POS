package mcgill.ecse539.pos.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BillTransactionConcept;
  private ConceptPresentation props_EmployeeConcept;
  private ConceptPresentation props_IngredientConcept;
  private ConceptPresentation props_InventoryConcept;
  private ConceptPresentation props_InventoryItemConcept;
  private ConceptPresentation props_MenuItemConcept;
  private ConceptPresentation props_OrderConcept;
  private ConceptPresentation props_OrderItemConcept;
  private ConceptPresentation props_POS;
  private ConceptPresentation props_TableConcept;
  private ConceptPresentation props_TransactionTypeConcept;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BillTransactionConcept:
        if (props_BillTransactionConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BillTransactionConcept");
          props_BillTransactionConcept = cpb.create();
        }
        return props_BillTransactionConcept;
      case LanguageConceptSwitch.EmployeeConcept:
        if (props_EmployeeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmployeeConcept");
          props_EmployeeConcept = cpb.create();
        }
        return props_EmployeeConcept;
      case LanguageConceptSwitch.IngredientConcept:
        if (props_IngredientConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7d3ecb5c844f43f0L, 0x98db2b52b269987bL, 0x1e5a213b72756c61L, 0x1e5a213b72756c62L, "inventoryItem", "", "");
          props_IngredientConcept = cpb.create();
        }
        return props_IngredientConcept;
      case LanguageConceptSwitch.InventoryConcept:
        if (props_InventoryConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InventoryConcept");
          props_InventoryConcept = cpb.create();
        }
        return props_InventoryConcept;
      case LanguageConceptSwitch.InventoryItemConcept:
        if (props_InventoryItemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InventoryItemConcept");
          props_InventoryItemConcept = cpb.create();
        }
        return props_InventoryItemConcept;
      case LanguageConceptSwitch.MenuItemConcept:
        if (props_MenuItemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MenuItemConcept");
          props_MenuItemConcept = cpb.create();
        }
        return props_MenuItemConcept;
      case LanguageConceptSwitch.OrderConcept:
        if (props_OrderConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OrderConcept");
          props_OrderConcept = cpb.create();
        }
        return props_OrderConcept;
      case LanguageConceptSwitch.OrderItemConcept:
        if (props_OrderItemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7d3ecb5c844f43f0L, 0x98db2b52b269987bL, 0x2bec263502412da4L, 0x2bec263502412e11L, "menuItem", "", "");
          props_OrderItemConcept = cpb.create();
        }
        return props_OrderItemConcept;
      case LanguageConceptSwitch.POS:
        if (props_POS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_POS = cpb.create();
        }
        return props_POS;
      case LanguageConceptSwitch.TableConcept:
        if (props_TableConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TableConcept");
          props_TableConcept = cpb.create();
        }
        return props_TableConcept;
      case LanguageConceptSwitch.TransactionTypeConcept:
        if (props_TransactionTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TransactionTypeConcept");
          props_TransactionTypeConcept = cpb.create();
        }
        return props_TransactionTypeConcept;
    }
    return null;
  }
}
